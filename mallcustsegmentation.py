# -*- coding: utf-8 -*-
"""mallcustsegmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15nHGS3dwotdqivuOMavItIZkSus4S_qM
"""

!pip install pandas
!pip install numpy
!pip install matplotlib
!pip install seaborn
!pip install sklearn
!pip install fuzzy-c-means

!pip install -q kaggle



import pandas as pd
import numpy as np
import matplotlib as mpl
from matplotlib import figure
from matplotlib import pyplot as plt
import seaborn as sb
from fcmeans import FCM
import sklearn
from sklearn.cluster import KMeans
from sklearn.cluster import DBSCAN
from sklearn import metrics
from sklearn.datasets import make_blobs
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from google.colab import files

from google.colab import drive
drive.mount('/content/drive')

files.upload()

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d vjchoudhary7/customer-segmentation-tutorial-in-python

ls

! unzip customer-segmentation-tutorial-in-python.zip && rm customer-segmentation-tutorial-in-python.zip

data= pd.read_csv("Mall_Customers.csv")
data['Gender'].replace([0,1],['Female','Male'],inplace=True)
data
# data.info()

#No missing values detected in step 6
#>>
#Check correlation via heatmaps
correlation= data.corr()
figure.Figure(figsize=(10,10))
sb.heatmap(correlation,cbar=True,square=True,fmt='0.1f',annot=True,cmap='Blues')
#Each square shows the correlation between the variables on each axis. 
#Correlation ranges from -1 to +1. 
#Values closer to zero means there is no linear trend between the two variables. 
#The close to 1 the correlation is the more positively correlated they are; 
#that is as one increases so does the other and the closer to 1 the stronger this relationship is. 
#A correlation closer to -1 is similar, but instead of both increasing one variable will decrease as the other increases. 
#The diagonals are all 1/dark green because those squares are correlating each variable to itself (so it's a perfect correlation). 
#For the rest the larger the number and darker the color the higher the correlation between the two variables.
#The plot is also symmetrical about the diagonal since the same two variables are being paired together in those squares.

figure.Figure(figsize=(10,10))
sb.countplot(x='Gender', data=data)
#Data shows females shop more than males

figure.Figure(figsize=(20,15))
sb.countplot(x="Age", data=data)
#Age data shows people started shopping high at age 19 but decreases as they're on their mid 20's
#But the age group in their early and mid 30's tend to shop more
#The shop trend lowers when they reach around late 50's and 60's

figure.Figure(figsize=(40,10))
sb.barplot(x='Annual Income (k$)',y='Spending Score (1-100)',data=data)
#Barplot is good to visualize time series or categorical data by letting x as categorical and y as numerical
#The result shows that people with lower income's spending score is similar to people with high income.
#While the mid income people shops less

#Taking age, income, and spending score to cluster
cl= data.iloc[:,[2,3,4]].values
#cl



x1=data.iloc[:,[2]]
x2=data.iloc[:,[3]]
x3=data.iloc[:,[4]]
plt.scatter(x1,x2,x3)
plt.show()

"""### **C-MEANS**"""

fcm = FCM(n_clusters=6)
fcm.fit(cl)

fcm_centers = fcm.centers
fcm_labels = fcm.predict(cl)
fcm_labels

f, axes = plt.subplots(1, 2, figsize=(11,5))
axes[0].scatter(cl[:,0], cl[:,1], alpha=.1)
axes[1].scatter(cl[:,0], cl[:,1], c=fcm_labels, alpha=.1)
axes[1].scatter(fcm_centers[:,0], fcm_centers[:,1], marker="+", s=500, c='w')
plt.show()

figuree= plt.figure(figsize=(10,10))
line= figuree.add_subplot(111,projection='3d')
line.scatter(cl[fcm_labels==0,0],cl[fcm_labels==0,1],cl[fcm_labels==0,2],s= 100,color='red',label='c1')

line.scatter(cl[fcm_labels==1,0],cl[fcm_labels==1,1],cl[fcm_labels==1,2],s= 100,color='green',label='c2')

line.scatter(cl[fcm_labels==2,0],cl[fcm_labels==2,1],cl[fcm_labels==2,2],s= 100,color='blue',label='c3')

line.scatter(cl[fcm_labels==3,0],cl[fcm_labels==3,1],cl[fcm_labels==3,2],s= 100,color='yellow',label='c4')

line.scatter(cl[fcm_labels==4,0],cl[fcm_labels==4,1],cl[fcm_labels==4,2],s= 100,color='purple',label='c5')

line.scatter(cl[fcm_labels==5,0],cl[fcm_labels==5,1],cl[fcm_labels==5,2],s= 100,color='pink',label='c6')

line.set_xlabel('Age-->')
line.set_ylabel('Anual Income-->')
line.set_zlabel('Spending Score-->')
line.legend()
plt.show()



"""## **/CMEANS**"""



"""## **K-MEANS (SURE?)**"""

km=KMeans(n_clusters=5,init='k-means++',random_state=0)
y=km.fit_predict(cl)
y

#Cluster Visualization
figuree= plt.figure(figsize=(10,10))
line= figuree.add_subplot(111,projection='3d')
line.scatter(cl[y==0,0],cl[y==0,1],cl[y==0,2],s= 100,color='red',label='c1')

line.scatter(cl[y==1,0],cl[y==1,1],cl[y==1,2],s= 100,color='green',label='c2')

line.scatter(cl[y==2,0],cl[y==2,1],cl[y==2,2],s= 100,color='blue',label='c3')

line.scatter(cl[y==3,0],cl[y==3,1],cl[y==3,2],s= 100,color='yellow',label='c4')

line.scatter(cl[y==4,0],cl[y==4,1],cl[y==4,2],s= 100,color='purple',label='c5')

line.set_xlabel('Age-->')
line.set_ylabel('Anual Income-->')
line.set_zlabel('Spending Score-->')
line.legend()
plt.show()

target_names = ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']
print(classification_report(data,y,target_names=target_names))

"""## **/KMEANS**"""



"""## **DBSCAN**"""

